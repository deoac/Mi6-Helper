#!/usr/bin/env raku

use Mi6::Helper;

use App::Mi6;
use Text::Utils :normalize-string;
use File::Find;
use Ask;

if not @*ARGS.elems {
    print qq:to/HERE/;
    Usage: {$*PROGRAM.basename} <mode> [options...]

    CAUTION: With mode 'old=X', ensure all user code is committed before using 
             the 'docs' option.

    Modes:
      new=X - Creates a new module (named X) directory by driving 'mi6', then
              changing certain files in the new repo to conform to the 'docs'
              option.  It also uses the 'provides' option for a short
              description of its main purpose. See details in the README.

      old   - *****NOT YET IMPLEMENTED*****
              Creates safe defaults for an 'mi6'-managed module in an existing
              Git Raku module repository. Reports findings and recommendations.
              See details in the README.

    Options:
      dir=X      - Selects parent directory 'X' for the operations, default is '.'
      provides=X - With '=X', defines either a file 'X' or text 'X' to be used 
                   in place of 'blah blah blah'. (Note No spaces are allowed in 
                   a text entry: use periods ['.'] between words.)
      provides   - Without '=X', the program expects a hidden text file named
                   the same as the module name but with hyphens in place of 
                   colon pairs. For example, the file for module 'Foo::Bar' is 
                   expected to be '.Foo-Bar'.
      force      - Used with the 'old' mode: allows overwriting file 'dist.ini'
      docs       - Used with the 'old' mode: uses file 'docs/README.rakudoc'
                   to produce 'README.md'. Note extra preparation is REQUIRED
                   by the user before using it.
      Debug      - For developer use

    HERE
    exit;
}

# modes
my $old   = 0;
my $new   = 0;
# options
my $force = 0;
my $debug = 0;
my $docs  = 0;
my $provides;
my $provides-hidden = 0;

# assume we are in the current working directory
my $parent-dir   = '.';

# other args
my $err = 0; # track number of possible errors

my $module-name;

for @*ARGS {
    when /:i ^'old=' (\S+) / {
        $module-name = ~$0;
        ++$old   
    }
    when /:i ^'new=' (\S+) / {
        $module-name = ~$0;
        ++$new;
    }
    when /:i ^f/ { ++$force }
    when /^'dir=' (\S+)/ {
        $parent-dir = ~$0;
    }
    when / ^d  / { ++$docs  }
    when / ^D  / { ++$debug }
    when /^ \h* provides \h* $/ {
        ++$provides-hidden;
    }
    when /^'provides=' (\S+)/ {
        $provides = ~$0;
        if $provides.IO.r {
            my $s = slurp $provides;
            $provides = '';
            for $s.lines {
                $provides ~= " $_";
            }
            $provides = normalize-string $provides;
        }
        else {
            $provides ~~ s:g/'.'/ /;
        }
    }
    default {
        die "FATAL: Unknown arg '$_'.";
    }
}

# Take care of 'provides'
# PRO
if $provides-hidden and not $provides.defined {
    # info is expected to be in the hidden file
    my $hidden = ".$module-name";
    $hidden ~~ s:g/'::'/-/;
    if $hidden.IO.r {
        my $s = slurp $hidden;
        $provides = '';
        for $s.lines {
            $provides ~= " $_";
        }
        $provides = normalize-string $provides;
        say "Getting description text from hidden file '$hidden'";
    }
    else {
        die "FATAL: Unable to find the hidden file '$hidden'.";
    }
}


if not ($new or $old) {
    die "FATAL: Neither 'new' nor 'old' is selected.";
}

die "FATAL: Path '$parent-dir' is not a directory."
    unless $parent-dir.IO.d;
say "Using directory '$parent-dir' as the working directory.";

if $new {
    mi6-helper-new :$parent-dir, :$module-name, :$provides, :$debug;
    say qq:to/HERE/;
    Exit after 'new' mode run. See new module repo '$module-name' 
      in parent dir '$parent-dir'.
    HERE
    exit;
}

if $old {
    say "NOTE: Mode 'old' is not yet implemented.";
    exit;
}


=finish

# safety checks
my $dist-ini = 'dist.ini';
if $dist-ini.IO.f {
    say "Danger, file '$dist-ini' exists.";
    say "Checking for the 'force' option...";
    if $force {
        my $ans = ask "Are you sure you want to continue (y/N): ";
        if $ans ~~ /:i ^y/ {
            say "Continuing with mods...":
        }
        else {
            say "Continuing safely without the 'force' option...";
            $force = 0;
        }
    }
    else {
        say "Continuing safely without the 'force' option...";
    }
}

say "User is '$*USER'" if $debug;
if "$*USER" eq 'tbrowde' {
    say "User is 'tbrowde', using 'docs' option..." if $debug;
    ++$docs;
}

unless ".git".IO.d {
    say qq:to/HERE/;
    WARNING: Directory '$dir' is not a Git repository.
             No '.git' subdirectory found.
    HERE
}

say "Checking for a fez account...";;
my $fezfil = "%*ENV<HOME>/.fez-config.json";
my $feznam;
if $fezfil.IO.r {
    $feznam = %(App::Mi6::JSON.decode(slurp $fezfil))<un>;
    say "Found fez user name '$feznam'";
    # check for an installed fez
    my $module = 'Fez::CLI';
    try require ::($module);
    if ::($module) ~~ Failure {
        say 'You must install fez: "$ zef install fez"';
    }
}
else {
    ++$err;
    say q:to/HERE/
    No fez config file found. This program assumes
      the user has a fez account and will be publishing
      this module to the zef archives.
      You must install fez first. Then execute
      '$ fez register' and follow the instructions.
    HERE
}

# check for META6.json and critical data
my $metafil = "$dir/META6.json";
my %meta;
if $metafil.IO.r {
    #%meta = from-json $metafil.IO.slurp;
    %meta = App::Mi6::JSON::decode(slurp $metafil);
    say "META6.json' file found and read.";
}
else {
    ++$err;
    say "No 'META6.json' file found.";
}

# check for module name
my $modnam = %meta<name>:exists ?? %meta<name> !! '';
if not $modnam {
    # Can we use an App::Mi6 instance?
    # Not easily.
    ++$err;
    say "No module 'name' found in the 'META6.json' file..";
}
